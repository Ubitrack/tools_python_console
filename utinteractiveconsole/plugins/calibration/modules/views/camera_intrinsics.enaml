from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (
    Container, Html, PushButton, MultilineField, ComboBox
)
import enaml
with enaml.imports():
    from utinteractiveconsole.plugins.calibration.views.module_templates import WizardPanel


from enaml_opengl.widgets.opengl_widget import OpenGLWidget

from enaml_opengl.renderer import MonoRenderer
from enaml_opengl.camera import PinholeCamera
from enaml_opengl.viewport import PerspectiveViewport

from enaml_opengl.scenegraph_node import Scene3D

from utinteractiveconsole.ui.background_texture import BackgroundTexture

enamldef CameraIntrinsicsCalibrationPanel(WizardPanel): panel:

    Scene3D: scene:
        name = "scene"

        BackgroundTexture: bgtexture:
            name = "bgtexture"

    PinholeCamera: camera:
        viewport = PerspectiveViewport()


    MonoRenderer: renderer:
        camera = camera
        scene << scene


    constraints = [
        vbox( hbox(content, results_txt),
              hbox(glview, ),
              hbox( spacer, select_image, capture_image )
        ),
        content.width == results_txt.width,
    ]

    Html: content:
        minimum_size = (200, 50)
        source = """
        <h1>%s</h1>
        <p>Please use a calibration checkerboard to capture images from different viewpoints to
           calibrate the camera intrinsics.</p>
        """ % module.get_name()

    MultilineField: results_txt:
        name = 'results_txt'
        text = """No results."""

    OpenGLWidget: glview:
        minimum_size = (640, 480)
        renderer = renderer
        key_press_event::
            v = change['value']
            if module_controller.is_ready and v.key == 32:
                module_controller.captureImage()

    ComboBox: select_image:
        items = ['calibration', 'verification']
        index = items.index('calibration')
        index:: module_controller.image_selector = items[index]

    PushButton: capture_image:
        text = "Capture Image"
        clicked :: module_controller.captureImage()
        enabled := module_controller.is_ready
