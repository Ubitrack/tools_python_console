from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (
    Container, Html, Page, PushButton
)

from enaml_opengl.widgets.opengl_widget import OpenGLWidget
from enaml_opengl.widgets.opengl_widget import OpenGLWidget

from enaml_opengl.renderer import MonoRenderer
from enaml_opengl.camera import PinholeCamera
from enaml_opengl.viewport import PerspectiveViewport

from enaml_opengl.scenegraph_node import Scene3D

from utinteractiveconsole.ui.background_texture import BackgroundTexture
from utinteractiveconsole.ui.calibrated_camera import CalibratedCamera





enamldef CameraHandEyeCalibrationPanel(Page):
    attr module
    attr module_state
    attr module_controller

    alias glview

    title = module.get_name()
    closable = False

    Scene3D: scene:
        name = "scene"

        BackgroundTexture:
            name = "bgtexture"

    PinholeCamera: camera:
        viewport = PerspectiveViewport()


    MonoRenderer: renderer:
        camera = camera
        scene << scene


    Container:
        constraints = [
            vbox( content,
                  glview,
                  hbox( spacer, capture_pose, start_module, stop_module )
            )
        ]

        Html: content:
            source = """
            <h1>Camera HandEye</h1>
            <p>Please use a fiducial marker and attach a tracking target to the camera.
               then capture poses from different viewpoints to
               calibrate the target to camera transform.</p>
            """

        OpenGLWidget: glview:
            minimum_size = (800, 600)
            renderer = renderer


        PushButton: capture_pose:
            text = "Capture Pose"
            clicked :: module_controller.capturePose()

        PushButton: start_module:
            text = "Start Calibration"
            clicked :: module_controller.startCalibration()

        PushButton: stop_module:
            text = "Stop Calibration"
            clicked :: module_controller.stopCalibration()



