from enaml.layout.api import hbox, vbox, spacer, align
from enaml.widgets.api import (
    Container, Html, PushButton, MultilineField
)
import enaml
with enaml.imports():
    from utinteractiveconsole.plugins.calibration.views.module_templates import WizardPanel


from enaml_opengl.widgets.opengl_widget import OpenGLWidget

from enaml_opengl.renderer import MonoRenderer
from enaml_opengl.viewport import PerspectiveViewport

from enaml_opengl.scenegraph_node import Scene3D
from enaml_opengl.nodes.api import AxisItem

from utinteractiveconsole.ui.background_texture import BackgroundTexture
from utinteractiveconsole.ui.calibrated_camera import CalibratedCamera

enamldef CameraStereoCalibrationPanel(WizardPanel):

    Scene3D: scene_left:
        name = "scene_left"

        BackgroundTexture:
            name = "bgtexture_left"


    CalibratedCamera: camera_left:
        name = "camera_left"
        viewport = PerspectiveViewport()


    MonoRenderer: renderer_left:
        name = "renderer_left"
        camera = camera_left
        scene << scene_left



    Scene3D: scene_right:
        name = "scene_right"

        BackgroundTexture:
            name = "bgtexture_right"


    CalibratedCamera: camera_right:
        name = "camera_right"
        viewport = PerspectiveViewport()


    MonoRenderer: renderer_right:
        name = "renderer_right"
        camera = camera_right
        scene << scene_right



    constraints = [
        vbox( hbox(content, results_txt),
              hbox(glview_left, glview_right),
              hbox(spacer, capture_image )
        ),
        content.width == results_txt.width,
        glview_left.width == glview_right.width,
    ]

    Html: content:
        minimum_size = (200, 50)
        source = """
        <h1>%s</h1>
        <p>Please use a checkerboard.
           Then capture poses from different viewpoints to
           calibrate the left-to-right camera transform.</p>
        """ % module.get_name()

    MultilineField: results_txt:
        name = 'results_txt'
        text = """No results."""

    OpenGLWidget: glview_left:
        name = "glview_left"
        minimum_size = (320, 240)
        constraints = [width == camera_left.w_h_ratio * height,]
        renderer = renderer_left
        key_press_event::
            v = change['value']
            module_controller.handle_keypress(v.key)

    OpenGLWidget: glview_right:
        name = "glview_right"
        minimum_size = (320, 240)
        constraints = [width == camera_right.w_h_ratio * height,]
        renderer = renderer_right
        key_press_event::
            v = change['value']
            module_controller.handle_keypress(v.key)

    PushButton: capture_image:
        text = "Capture Image"
        clicked :: module_controller.captureImage()
        enabled := module_controller.is_ready


