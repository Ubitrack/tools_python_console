import enaml
from enaml.layout.api import hbox, vbox, spacer
from enaml.widgets.api import (
    Window, Label, Container, Action, Menu, Notebook, PushButton, ScrollArea
)
from enaml.widgets.api import DockArea, DockItem, StatusBar, StatusItem, MultilineField
from enaml.widgets.ipython_console import IPythonConsole

from enaml.core.api import Looper
from enaml.core.api import Include
from enaml.styling import StyleSheet, Style, Setter
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.ui.api import ActionItem, MenuItem
from enaml.workbench.core.command import Command

from enaml.layout.api import (
    HSplitLayout, VSplitLayout, TabLayout, InsertItem, hbox, vbox, spacer
)

with enaml.imports():
    from utinteractiveconsole.ui.views.subprocess_control import SubprocessControl


# XXX does not work as expected .. need to find a way to bind the action item to the widget property
def toggle_console(event):
    """ The command handler for toggling the console.

    """
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    console_dockitem = ui.workspace.content.find('console')
    console_dockitem.visible = event.trigger.checked



enamldef TaskItemStyleSheet(StyleSheet):
    Style:
        element = 'Field'
        style_class = 'taskitem'
        Setter:
            field = 'background'
            value = 'white'
        Setter:
            field = 'padding'
            value = '0px'
        Setter:
            field = 'margins'
            value = '0px'
        Setter:
            field = 'color'
            value = 'black'
    Style:
        element = 'Field'
        style_class = 'taskitem-done'
        Setter:
            field = 'background'
            value = 'green'
        Setter:
            field = 'padding'
            value = '0px'
        Setter:
            field = 'margins'
            value = '0px'
        Setter:
            field = 'color'
            value = 'white'


enamldef WizardView(DockItem): wizard:
    attr module_manager
    attr controller
    attr state

    alias looper
    alias content
    alias control

    TaskItemStyleSheet:
        pass

    Container:
        padding = (0, 0, 0, 0)
        minimum_size = (800, 600)
        constraints = [
            hbox(
                vbox(scroller, control),
                content,
            ),
            scroller.width == 250,
        ]
        ScrollArea: scroller:
            Container:
                hug_width = "medium"
                Looper: looper:
                    iterable << wizard.state.task_list
                    Container:
                        hug_height = 'strong'
                        padding = 0
                        Label:
                            text = wizard.state.module_manager.modules[loop_item].get_name()

        Container: content:
            constraints = [
                vbox(
                    module_content,
                    hbox(spacer, skip_btn, ok_btn),
                ),
            ]
            alias content_include

            Container: module_content:
                padding = (0, 0, 0, 0)
                Include: content_include:
                    objects << wizard.state.active_widgets

            PushButton: ok_btn:
                text << state.text_ok_button
                clicked :: wizard.controller.on_ok(content)

            PushButton: skip_btn:
                text = 'Skip'
                visible << state.show_skip_button
                enabled << state.enable_skip_button
                clicked :: wizard.controller.on_skip(content)

        Container: control:
            alias subprocess
            SubprocessControl: subprocess:
                facade := wizard.state.facade



enamldef WizardDockArea(DockArea): dockarea:
    attr appstate
    attr utic_plugin

    name = "calibration_wizard_dockarea"

    layout = TabLayout(
        'console',
    )


    DockItem:
        name = 'console'
        title = 'Console'
        closable = False
        visible = False

        Container: console:
            alias ipy
            constraints = [vbox(ipy, spacing=3)]

            IPythonConsole: ipy:
                initial_ns = dockarea.appstate.context


enamldef WizardMain(Container): main:
    attr appstate
    attr utic_plugin

    alias area

    padding = (0, 0, 0, 0)
    constraints = [vbox(area, spacing=0)]
    WizardDockArea: area:
        appstate := main.appstate



enamldef WizardManifest(PluginManifest): plugin_manifest:
    """ The manifest which is registered when the view is loaded.

    This manifest contributes extra menu items to the menu bar.

    """
    attr appstate
    attr utic_plugin

    id = 'uticmain.calibration_wizard'
    Extension: plugin_ext:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/calibration'
            label = 'Calibration'
            after = 'file'
            before = 'view'

        MenuItem:
            path = '/view'
            label = 'View'
            after = 'calibration'
            before = 'workspace'

        ActionItem:
            path = '/view/console'
            label = 'IPython Console'
            checkable = True
            checked = True
            command = 'utic.commands.extensions.calibration_wizard.toggle_console'

        Include:
            objects << utic_plugin.generateWorkspaceActionItems(plugin_ext)

    Extension:
        id = 'load_dataflow_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'utic.commands.extensions.calibration_wizard.toggle_console'
            description = "Console"
            handler = toggle_console

        Include:
            objects << utic_plugin.generateWorkspaceCommands(plugin_manifest)

