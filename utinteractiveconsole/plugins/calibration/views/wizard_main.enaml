import enaml
from enaml.widgets.api import (
    Label, Container, PushButton, ScrollArea
)
from enaml.widgets.api import DockArea, DockItem, StatusBar, StatusItem
from enaml.widgets.ipython_console import IPythonConsole

from enaml.core.api import Looper
from enaml.core.api import Include
from enaml.styling import StyleSheet, Style, Setter
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.ui.api import ActionItem, MenuItem
from enaml.workbench.core.command import Command

from enaml.layout.api import (
    InsertItem, FloatItem, hbox, vbox, spacer
)

with enaml.imports():
    from utinteractiveconsole.ui.views.subprocess_control import SubprocessControl


enamldef ConsoleWindow(DockItem):
    attr workbench
    attr context

    title = "IPython Console"

    Container: console:
        padding = (0, 0, 0, 0)
        alias ipy
        constraints = [vbox(ipy, spacing=3)]

        IPythonConsole: ipy:
            minimum_size = (400,200)
            initial_ns = context

def show_console(event):
    """ The command handler for toggling the console.

    """
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    da = ui.workspace.content.find("wizard_dockarea")

    context = ui.workspace.appstate.context.copy()
    context['ui'] = ui

    cw = ConsoleWindow(da, name="ipython_console", context=context)
    op = InsertItem(item=cw.name, target='new', position='bottom')
    da.update_layout(op)



enamldef TaskItemStyleSheet(StyleSheet):
    Style:
        element = 'Label'
        style_class = 'taskitem'
        Setter:
            field = 'color'
            value = 'black'
    Style:
        element = 'Label'
        style_class = 'taskitem-done'
        Setter:
            field = 'color'
            value = 'green'


enamldef WizardView(DockItem): wizard:
    attr module_manager
    attr controller
    attr state
    attr preview

    alias looper
    alias content
    # alias control

    TaskItemStyleSheet:
        pass

    Container:
        padding = (2, 2, 2, 2)
        minimum_size = (800, 600)
        constraints = [
            hbox(
                # vbox(scroller, control),
                scroller,
                content,
            ),
        ]
        ScrollArea: scroller:
            hug_width = "strong"
            Container:
                padding = (2, 2, 2, 2)
                background = 'white'
                Looper: looper:
                    iterable << wizard.state.tasks
                    Container:
                        padding = 5
                        Label:
                            style_class << loop_item.completed and "taskitem-done" or "taskitem"
                            text = wizard.state.module_manager.modules[loop_item.name].get_name()
                    # iterable << wizard.state.task_list
                    # Container:
                    #     hug_height = 'strong'
                    #     padding = 0
                    #     Label:
                    #         text = wizard.state.module_manager.modules[loop_item].get_name()

        Container: content:
            constraints = [
                vbox(
                    module_content,
                    hbox(spacer, back_btn, skip_btn, next_btn),
                ),
            ]
            hug_width = "weak"
            alias content_include
            padding = (2, 2, 2, 2)

            Container: module_content:
                hug_width = "weak"
                padding = (0, 0, 0, 0)
                Include: content_include:
                    objects << wizard.state.active_widgets

            PushButton: next_btn:
                text := state.text_next_button
                visible := state.show_next_button
                enabled := state.enable_next_button
                clicked :: wizard.controller.on_next(content)

            PushButton: back_btn:
                text := state.text_back_button
                visible := state.show_back_button
                enabled := state.enable_back_button
                clicked :: wizard.controller.on_back(content)

            PushButton: skip_btn:
                text := state.text_skip_button
                visible := state.show_skip_button
                enabled := state.enable_skip_button
                clicked :: wizard.controller.on_skip(content)

        # Container: control:
        #     visible = False
        #     alias subprocess
        #     SubprocessControl: subprocess:
        #         facade := wizard.state.facade



enamldef WizardDockArea(DockArea): dockarea:
    attr appstate
    attr utic_plugin
    name = "calibration_wizard_dockarea"


enamldef WizardMain(Container): main:
    attr appstate
    attr utic_plugin

    alias area

    padding = (0, 0, 0, 0)
    constraints = [vbox(area, spacing=0)]
    WizardDockArea: area:
        name = "wizard_dockarea"
        appstate := main.appstate



enamldef WizardManifest(PluginManifest): plugin_manifest:
    """ The manifest which is registered when the view is loaded.

    This manifest contributes extra menu items to the menu bar.

    """
    attr appstate
    attr utic_plugin

    id = 'uticmain.calibration_wizard'
    Extension: plugin_ext:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/calibration'
            label = 'Calibration'
            after = 'file'
            before = 'view'

        MenuItem:
            path = '/view'
            label = 'View'
            after = 'calibration'
            before = 'workspace'

        ActionItem:
            path = '/view/console'
            label = 'IPython Console'
            command = 'utic.commands.extensions.calibration_wizard.show_console'

        Include:
            objects << utic_plugin.generateWorkspaceActionItems(plugin_ext)

    Extension:
        id = 'load_dataflow_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'utic.commands.extensions.calibration_wizard.show_console'
            description = "Console"
            handler = show_console

        Include:
            objects << utic_plugin.generateWorkspaceCommands(plugin_manifest)

