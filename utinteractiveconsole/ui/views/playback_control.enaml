from enaml.layout.api import grid, spacer
from enaml.widgets.api import (
    Label, Container, PushButton, Slider, Timer, SpinBox, Field, Window, DualSlider
)
import math


enamldef PlaybackControl(Container):
    attr data

    alias cur_pos

    constraints = [
        grid(
            [pb_fb, pb_back, pb_play, pb_forward, pb_ff, pb_range],
            [pb_pause,  pb_stop,  lbl_pos, step_size, speed_ctrl, cur_pos],
            column_align='width',
            row_align='v_center',
        ),
    ]
    PushButton: pb_fb:
        text = '<<'
        clicked ::
            step = (pb_range.high_value - pb_range.low_value) / 20
            if cur_pos.value - step > pb_range.low_value:
                cur_pos.value -= step
            else:
                cur_pos.value = pb_range.low_value

    PushButton: pb_back:
        text = '<'
        clicked ::
            if cur_pos.value - step_size.value > pb_range.low_value:
                cur_pos.value -= step_size.value
            else:
                cur_pos.value = pb_range.low_value

    PushButton: pb_play:
        text = 'Play'
        clicked ::
            timer.start()

    PushButton: pb_pause:
        text = 'Pause'
        clicked ::
            timer.stop()

    PushButton: pb_stop:
        text = 'Stop'
        clicked ::
            timer.stop()
            cur_pos.value = 0

    PushButton: pb_ff:
        text = '>>'
        clicked ::
            step = (pb_range.high_value - pb_range.low_value) / 20
            if cur_pos.value + step < pb_range.high_value:
                cur_pos.value += step
            else:
                cur_pos.value = pb_range.high_value

    PushButton: pb_forward:
        text = '>'
        clicked ::
            if cur_pos.value + step_size.value < pb_range.high_value:
                cur_pos.value += step_size.value
            else:
                cur_pos.value = pb_range.high_value

    Field: lbl_pos:
        text << u'{}'.format(cur_pos.value)
        read_only = True

    Slider: cur_pos:
        tick_interval = 1
        minimum = 0
        maximum << (len(data.items) - 1) if data is not None else 0
        value := data.current_position

    Slider: speed_ctrl:
        tick_interval = 1
        minimum = -25
        maximum = +25
        value = 0

    DualSlider: pb_range:
        tick_interval = 1
        minimum = 0
        maximum << (len(data.items) - 1) if data is not None else 0

    SpinBox: step_size:
        minimum = 1
        maximum = 100
        value = 1

    Timer: timer:
        interval << int(data.interval * (2.0**(-speed_ctrl.value/5.0))) if data is not None else 1000
        timeout ::
            if cur_pos.value + step_size.value < pb_range.high_value:
                cur_pos.value += step_size.value
            else:
                cur_pos.value = pb_range.low_value


enamldef PlaybackControlWindow(Window): main:
    attr data
    title << "Playback Control"

    alias panel: pbc

    PlaybackControl: pbc:
        data = main.data

